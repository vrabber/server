// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.6
// source: agent/agent.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LoadFileService_LoadFile_FullMethodName = "/agent.LoadFileService/LoadFile"
)

// LoadFileServiceClient is the client API for LoadFileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoadFileServiceClient interface {
	LoadFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[LoadFileRequest, LoadFileResponse], error)
}

type loadFileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLoadFileServiceClient(cc grpc.ClientConnInterface) LoadFileServiceClient {
	return &loadFileServiceClient{cc}
}

func (c *loadFileServiceClient) LoadFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[LoadFileRequest, LoadFileResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LoadFileService_ServiceDesc.Streams[0], LoadFileService_LoadFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[LoadFileRequest, LoadFileResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LoadFileService_LoadFileClient = grpc.ClientStreamingClient[LoadFileRequest, LoadFileResponse]

// LoadFileServiceServer is the server API for LoadFileService service.
// All implementations must embed UnimplementedLoadFileServiceServer
// for forward compatibility.
type LoadFileServiceServer interface {
	LoadFile(grpc.ClientStreamingServer[LoadFileRequest, LoadFileResponse]) error
	mustEmbedUnimplementedLoadFileServiceServer()
}

// UnimplementedLoadFileServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLoadFileServiceServer struct{}

func (UnimplementedLoadFileServiceServer) LoadFile(grpc.ClientStreamingServer[LoadFileRequest, LoadFileResponse]) error {
	return status.Errorf(codes.Unimplemented, "method LoadFile not implemented")
}
func (UnimplementedLoadFileServiceServer) mustEmbedUnimplementedLoadFileServiceServer() {}
func (UnimplementedLoadFileServiceServer) testEmbeddedByValue()                         {}

// UnsafeLoadFileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoadFileServiceServer will
// result in compilation errors.
type UnsafeLoadFileServiceServer interface {
	mustEmbedUnimplementedLoadFileServiceServer()
}

func RegisterLoadFileServiceServer(s grpc.ServiceRegistrar, srv LoadFileServiceServer) {
	// If the following call pancis, it indicates UnimplementedLoadFileServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LoadFileService_ServiceDesc, srv)
}

func _LoadFileService_LoadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LoadFileServiceServer).LoadFile(&grpc.GenericServerStream[LoadFileRequest, LoadFileResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LoadFileService_LoadFileServer = grpc.ClientStreamingServer[LoadFileRequest, LoadFileResponse]

// LoadFileService_ServiceDesc is the grpc.ServiceDesc for LoadFileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoadFileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agent.LoadFileService",
	HandlerType: (*LoadFileServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LoadFile",
			Handler:       _LoadFileService_LoadFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "agent/agent.proto",
}
